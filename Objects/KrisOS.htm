<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\KrisOS.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\KrisOS.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060183: Last Updated: Wed Mar 01 23:04:36 2017
<BR><P>
<H3>Maximum Stack Usage =        176 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
stats &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[1b]">ADC0SS0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">ADC0SS0_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1b]">ADC0SS0_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1c]">ADC0SS1_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1d]">ADC0SS2_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1e]">ADC0SS3_Handler</a> from light_sensor.o(i.ADC0SS3_Handler) referenced from startup.o(RESET)
 <LI><a href="#[3c]">ADC1SS0_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3d]">ADC1SS1_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3e]">ADC1SS2_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3f]">ADC1SS3_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[34]">CAN0_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[35]">CAN1_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[36]">CAN2_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[26]">COMP0_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[27]">COMP1_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[28]">COMP2_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2a]">FLASH_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[5c]">FPU_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[d]">GPIOA_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[e]">GPIOB_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[f]">GPIOC_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[10]">GPIOD_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[11]">GPIOE_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2b]">GPIOF_Handler</a> from nokia5110_backlight.o(i.GPIOF_Handler) referenced from startup.o(RESET)
 <LI><a href="#[2c]">GPIOG_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2d]">GPIOH_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[40]">GPIOJ_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[41]">GPIOK_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[42]">GPIOL_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[5f]">GPIOM_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[60]">GPION_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[62]">GPIOP0_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[63]">GPIOP1_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[64]">GPIOP2_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[65]">GPIOP3_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[66]">GPIOP4_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[67]">GPIOP5_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[68]">GPIOP6_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[69]">GPIOP7_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[6a]">GPIOQ0_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[6b]">GPIOQ1_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[6c]">GPIOQ2_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[6d]">GPIOQ3_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[6e]">GPIOQ4_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[6f]">GPIOQ5_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[70]">GPIOQ6_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[71]">GPIOQ7_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[72]">GPIOR_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[73]">GPIOS_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[37]">HIB_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[15]">I2C0_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[32]">I2C1_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[4a]">I2C2_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[4b]">I2C3_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[5d]">I2C4_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[5e]">I2C5_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[16]">PMW0_FAULT_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[74]">PMW1_0_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[17]">PWM0_0_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[18]">PWM0_1_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[19]">PWM0_2_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[39]">PWM0_3_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[75]">PWM1_1_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[76]">PWM1_2_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[77]">PWM1_3_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[78]">PWM1_FAULT_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1a]">QEI0_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[33]">QEI1_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[61]">QEI2_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[83]">Reset_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[14]">SSI0_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2f]">SSI1_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[43]">SSI2_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[44]">SSI3_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[29]">SYSCTL_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from os.o(i.SysTick_Handler) referenced from startup.o(RESET)
 <LI><a href="#[20]">TIMER0A_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[21]">TIMER0B_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[22]">TIMER1A_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[23]">TIMER1B_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[24]">TIMER2A_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[25]">TIMER2B_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[30]">TIMER3A_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[31]">TIMER3B_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[4c]">TIMER4A_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[4d]">TIMER4B_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[4e]">TIMER5A_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[4f]">TIMER5B_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[12]">UART0_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[13]">UART1_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2e]">UART2_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[45]">UART3_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[46]">UART4_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[47]">UART5_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[48]">UART6_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[49]">UART7_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3b]">UDMAERR_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3a]">UDMA_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[38]">USB0_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1f]">WDT0_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[50]">WTIMER0A_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[51]">WTIMER0B_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[52]">WTIMER1A_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[53]">WTIMER1B_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[54]">WTIMER2A_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[55]">WTIMER2B_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[56]">WTIMER3A_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[57]">WTIMER3B_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[58]">WTIMER4A_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[59]">WTIMER4B_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[5a]">WTIMER5A_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[5b]">WTIMER5B_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[7b]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[7a]">fputc</a> from retarget.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[80]">idle</a> from os_tasks.o(i.idle) referenced from scheduler.o(i.scheduler_init)
 <LI><a href="#[7e]">lightSensor</a> from light_sensor.o(i.lightSensor) referenced from demo3.o(i.main)
 <LI><a href="#[79]">main</a> from demo3.o(i.main) referenced from startup.o(.text)
 <LI><a href="#[7f]">nokiaLCDBacklight</a> from nokia5110_backlight.o(i.nokiaLCDBacklight) referenced from demo3.o(i.main)
 <LI><a href="#[7c]">nokiaLCDSetup</a> from nokia5110.o(i.nokiaLCDSetup) referenced from demo3.o(i.main)
 <LI><a href="#[81]">stats</a> from os_tasks.o(i.stats) referenced from scheduler.o(i.scheduler_init)
 <LI><a href="#[82]">task_complete_handler</a> from scheduler.o(i.task_complete_handler) referenced from scheduler.o(i.task_init)
 <LI><a href="#[7d]">thermometer</a> from thermometer.o(i.thermometer) referenced from demo3.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[84]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[86]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[88]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[e8]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[e9]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[89]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[ea]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[8a]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[9f]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[eb]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[91]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[8c]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[ec]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[ed]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[ee]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[ef]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[f0]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[f1]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[f2]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[f3]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[f4]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[f5]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[f6]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[f7]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[f8]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[f9]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[fa]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[fb]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[fc]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[fd]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[fe]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[ff]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[95]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[100]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[101]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[102]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[103]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[104]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[105]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[106]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[87]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[107]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[8e]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[90]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[108]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[92]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; KrisOS_task_stack_usage
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[109]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[a0]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[94]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[10a]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[96]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __rt_exit_exit &rArr; _sys_exit &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[da]"></a>__disable_irqs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, special_reg_access.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
</UL>

<P><STRONG><a name="[df]"></a>__enable_irqs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, special_reg_access.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
</UL>

<P><STRONG><a name="[10b]"></a>__set_base_prio</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, special_reg_access.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>__get_base_prio</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, special_reg_access.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>__set_psp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, special_reg_access.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start
</UL>

<P><STRONG><a name="[10d]"></a>__get_psp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, special_reg_access.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>__enable_fpu</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, special_reg_access.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
</UL>

<P><STRONG><a name="[10e]"></a>__disable_fpu</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, special_reg_access.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__set_control</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, special_reg_access.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start
</UL>

<P><STRONG><a name="[10f]"></a>__get_control</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, special_reg_access.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>__get_ipsr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, special_reg_access.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>__start_critical</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, special_reg_access.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release_all
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_remove
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_add
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sleep
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delete
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_try_acquire
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_release
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_acquire
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_wake_tasks
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_run
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_try_lock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_delete
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>

<P><STRONG><a name="[d2]"></a>__end_critical</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, special_reg_access.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release_all
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_remove
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_add
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sleep
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delete
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_try_acquire
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_release
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_acquire
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_wake_tasks
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_run
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_try_lock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_delete
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>

<P><STRONG><a name="[83]"></a>Reset_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_control
</UL>

<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ADC0SS0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC0SS1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC0SS2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>ADC1SS0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>ADC1SS1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>ADC1SS2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>ADC1SS3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CAN0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>CAN2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>COMP0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>COMP1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>COMP2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>FLASH_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>FPU_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>GPIOA_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>GPIOB_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>GPIOC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>GPIOD_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>GPIOE_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>GPIOG_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>GPIOH_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>GPIOJ_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>GPIOK_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>GPIOL_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>GPIOM_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>GPION_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>GPIOP0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>GPIOP1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>GPIOP2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>GPIOP3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>GPIOP4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>GPIOP5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>GPIOP6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>GPIOP7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>GPIOQ0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>GPIOQ1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>GPIOQ2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>GPIOQ3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>GPIOQ4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>GPIOQ5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>GPIOQ6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>GPIOQ7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>GPIOR_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>GPIOS_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>HIB_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>I2C0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>I2C2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>I2C3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>I2C4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>I2C5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PMW0_FAULT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>PMW1_0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PWM0_0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PWM0_1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PWM0_2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>PWM0_3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>PWM1_1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>PWM1_2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>PWM1_3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>PWM1_FAULT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>QEI0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>QEI1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>QEI2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SSI0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SSI1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SSI2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SSI3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SYSCTL_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIMER0A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIMER0B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIMER1A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIMER1B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIMER2A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER2B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIMER3A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIMER3B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIMER4A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIMER4B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIMER5A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIMER5B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>UART2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>UART3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>UART4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UART7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>UDMAERR_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UDMA_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USB0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>WDT0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>WTIMER0A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>WTIMER0B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>WTIMER1A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>WTIMER1B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>WTIMER2A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>WTIMER2B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>WTIMER3A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>WTIMER3B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>WTIMER4A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>WTIMER4B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>WTIMER5A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>WTIMER5B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[111]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[113]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>__2fprintf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2fprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nokiaLCDSetup
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermometer
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lightSensor
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[a1]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[a2]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[8b]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[9d]"></a>__printf</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, __printf_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[93]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release_all
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create_static
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create_dynamic
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_try_acquire
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_release
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_delete
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_acquire
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_try_lock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_delete
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[114]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[9b]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>

<P><STRONG><a name="[a3]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[8f]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[117]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[118]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1e]"></a>ADC0SS3_Handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, light_sensor.o(i.ADC0SS3_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ADC0SS3_Handler &rArr; KrisOS_sem_release_from_ISR &rArr; sem_release &rArr; task_add
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KrisOS_sem_release_from_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>GPIOF_Handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nokia5110_backlight.o(i.GPIOF_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = GPIOF_Handler &rArr; KrisOS_sem_release_from_ISR &rArr; sem_release &rArr; task_add
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KrisOS_sem_release_from_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>KrisOS_sem_release_from_ISR</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, semaphore.o(i.KrisOS_sem_release_from_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = KrisOS_sem_release_from_ISR &rArr; sem_release &rArr; task_add
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOF_Handler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS3_Handler
</UL>

<P><STRONG><a name="[cf]"></a>KrisOS_task_stack_usage</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scheduler.o(i.KrisOS_task_stack_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KrisOS_task_stack_usage
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create_dynamic
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_init
</UL>

<P><STRONG><a name="[99]"></a>SVC_Handler_C</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, os.o(i.SVC_Handler_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = SVC_Handler_C &rArr; task_create_dynamic &rArr; malloc &rArr; mutex_lock &rArr; task_add
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sleep
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delete
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create_static
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create_dynamic
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_try_acquire
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_release
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_delete
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_create
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_acquire
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_run
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_set_priority
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_set_pending
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_read_active
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_get_priority
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_enable_irq
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_disable_irq
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_clear_pending
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_try_lock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_delete
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_create
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, os.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SysTick_Handler &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_wake_tasks
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_run
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[97]"></a>_sys_exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, retarget.o(i._sys_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = _sys_exit &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[d0]"></a>align_byte_number</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, heap.o(i.align_byte_number))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[ca]"></a>buzzer_init</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, light_sensor.o(i.buzzer_init))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lightSensor
</UL>

<P><STRONG><a name="[ce]"></a>buzzer_off</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, light_sensor.o(i.buzzer_off))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lightSensor
</UL>

<P><STRONG><a name="[cd]"></a>buzzer_tone</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, light_sensor.o(i.buzzer_tone))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lightSensor
</UL>

<P><STRONG><a name="[a4]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[7a]"></a>fputc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = fputc &rArr; nokia5110_send_char &rArr; nokia5110_set_cursor
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nokia5110_send_char
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>free</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, heap.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = free &rArr; mutex_lock &rArr; task_add
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_insert_free_block
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delete
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_delete
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_delete
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_C
</UL>

<P><STRONG><a name="[c8]"></a>heap_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, heap.o(i.heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = heap_init &rArr; mutex_init &rArr; exit
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
</UL>

<P><STRONG><a name="[c7]"></a>heap_insert_free_block</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, heap.o(i.heap_insert_free_block))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[e4]"></a>i2c_init</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, thermometer.o(i.i2c_init))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermometer
</UL>

<P><STRONG><a name="[e7]"></a>i2c_read</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, thermometer.o(i.i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermometer
</UL>

<P><STRONG><a name="[e5]"></a>i2c_slave_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thermometer.o(i.i2c_slave_addr))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermometer
</UL>

<P><STRONG><a name="[e6]"></a>i2c_write</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, thermometer.o(i.i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermometer
</UL>

<P><STRONG><a name="[80]"></a>idle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_tasks.o(i.idle))
<BR>[Address Reference Count : 1]<UL><LI> scheduler.o(i.scheduler_init)
</UL>
<P><STRONG><a name="[7e]"></a>lightSensor</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, light_sensor.o(i.lightSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = lightSensor &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nokia5110_set_cursor
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nokia5110_send
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_sensor_init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_tone
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_off
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo3.o(i.main)
</UL>
<P><STRONG><a name="[c9]"></a>light_sensor_init</STRONG> (Thumb, 274 bytes, Stack size 8 bytes, light_sensor.o(i.light_sensor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = light_sensor_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lightSensor
</UL>

<P><STRONG><a name="[79]"></a>main</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, demo3.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = main &rArr; KrisOS_task_stack_usage
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KrisOS_task_stack_usage
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>malloc</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, heap.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = malloc &rArr; mutex_lock &rArr; task_add
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_insert_free_block
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_byte_number
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create_dynamic
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_create
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_create
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_C
</UL>

<P><STRONG><a name="[b9]"></a>mutex_create</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mutex.o(i.mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = mutex_create &rArr; malloc &rArr; mutex_lock &rArr; task_add
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_C
</UL>

<P><STRONG><a name="[bd]"></a>mutex_delete</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mutex.o(i.mutex_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = mutex_delete &rArr; free &rArr; mutex_lock &rArr; task_add
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__start_critical
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__end_critical
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_C
</UL>

<P><STRONG><a name="[b8]"></a>mutex_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mutex.o(i.mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = mutex_init &rArr; exit
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_create
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_C
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_init
</UL>

<P><STRONG><a name="[bb]"></a>mutex_lock</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, mutex.o(i.mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = mutex_lock &rArr; task_add
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__start_critical
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__end_critical
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_remove
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_add
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_run
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_try_lock
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_C
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[d5]"></a>mutex_release_all</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mutex.o(i.mutex_release_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = mutex_release_all &rArr; mutex_unlock &rArr; task_add
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__start_critical
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__end_critical
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sleep
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delete
</UL>

<P><STRONG><a name="[ba]"></a>mutex_try_lock</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mutex.o(i.mutex_try_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = mutex_try_lock &rArr; exit
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__start_critical
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__end_critical
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_C
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>

<P><STRONG><a name="[bc]"></a>mutex_unlock</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, mutex.o(i.mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = mutex_unlock &rArr; task_add
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__start_critical
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__end_critical
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_remove
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_add
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_run
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release_all
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_C
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[d9]"></a>nokia5110_backlight_control_pin_init</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, nokia5110_backlight.o(i.nokia5110_backlight_control_pin_init))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nokiaLCDBacklight
</UL>

<P><STRONG><a name="[d8]"></a>nokia5110_backlight_switch_init</STRONG> (Thumb, 232 bytes, Stack size 0 bytes, nokia5110_backlight.o(i.nokia5110_backlight_switch_init))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nokiaLCDBacklight
</UL>

<P><STRONG><a name="[d6]"></a>nokia5110_clear</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nokia5110.o(i.nokia5110_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nokia5110_clear &rArr; nokia5110_set_cursor
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nokia5110_set_cursor
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nokia5110_send
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nokia5110_init
</UL>

<P><STRONG><a name="[d7]"></a>nokia5110_init</STRONG> (Thumb, 302 bytes, Stack size 8 bytes, nokia5110.o(i.nokia5110_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nokia5110_init &rArr; nokia5110_clear &rArr; nokia5110_set_cursor
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nokia5110_send
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nokia5110_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nokiaLCDSetup
</UL>

<P><STRONG><a name="[cc]"></a>nokia5110_send</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, nokia5110.o(i.nokia5110_send))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nokia5110_set_cursor
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nokia5110_send_char
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nokia5110_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nokia5110_clear
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lightSensor
</UL>

<P><STRONG><a name="[c5]"></a>nokia5110_send_char</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, nokia5110.o(i.nokia5110_send_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nokia5110_send_char &rArr; nokia5110_set_cursor
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nokia5110_set_cursor
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nokia5110_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[cb]"></a>nokia5110_set_cursor</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, nokia5110.o(i.nokia5110_set_cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nokia5110_set_cursor
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nokia5110_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nokiaLCDSetup
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nokia5110_send_char
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nokia5110_clear
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermometer
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lightSensor
</UL>

<P><STRONG><a name="[7f]"></a>nokiaLCDBacklight</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nokia5110_backlight.o(i.nokiaLCDBacklight))
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nokia5110_backlight_switch_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nokia5110_backlight_control_pin_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo3.o(i.main)
</UL>
<P><STRONG><a name="[7c]"></a>nokiaLCDSetup</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nokia5110.o(i.nokiaLCDSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = nokiaLCDSetup &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nokia5110_set_cursor
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nokia5110_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo3.o(i.main)
</UL>
<P><STRONG><a name="[ad]"></a>nvic_clear_pending</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, nvic.o(i.nvic_clear_pending))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_C
</UL>

<P><STRONG><a name="[ab]"></a>nvic_disable_irq</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, nvic.o(i.nvic_disable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_C
</UL>

<P><STRONG><a name="[aa]"></a>nvic_enable_irq</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nvic.o(i.nvic_enable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_C
</UL>

<P><STRONG><a name="[b0]"></a>nvic_get_priority</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nvic.o(i.nvic_get_priority))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_C
</UL>

<P><STRONG><a name="[ae]"></a>nvic_read_active</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nvic.o(i.nvic_read_active))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_C
</UL>

<P><STRONG><a name="[ac]"></a>nvic_set_pending</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, nvic.o(i.nvic_set_pending))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_C
</UL>

<P><STRONG><a name="[af]"></a>nvic_set_priority</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nvic.o(i.nvic_set_priority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nvic_set_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_C
</UL>

<P><STRONG><a name="[a8]"></a>os_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, os.o(i.os_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = os_init &rArr; scheduler_init &rArr; task_create_static &rArr; task_init &rArr; task_add
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_set_priority
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__enable_irqs
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__enable_fpu
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__disable_irqs
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_init
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_C
</UL>

<P><STRONG><a name="[a9]"></a>os_start</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, os.o(i.os_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = os_start &rArr; systick_config &rArr; nvic_set_priority
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_run
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_psp
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_control
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_C
</UL>

<P><STRONG><a name="[dd]"></a>scheduler_init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, scheduler.o(i.scheduler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = scheduler_init &rArr; task_create_static &rArr; task_init &rArr; task_add
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KrisOS_task_stack_usage
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create_static
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_set_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
</UL>

<P><STRONG><a name="[b4]"></a>scheduler_run</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, scheduler.o(i.scheduler_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = scheduler_run
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__start_critical
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__end_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sleep
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delete
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_release
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_acquire
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_wake_tasks
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_C
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>

<P><STRONG><a name="[c3]"></a>scheduler_wake_tasks</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, scheduler.o(i.scheduler_wake_tasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = scheduler_wake_tasks &rArr; task_add
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__start_critical
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__end_critical
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_remove
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_add
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_run
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[c2]"></a>sem_acquire</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, semaphore.o(i.sem_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = sem_acquire &rArr; task_sleep &rArr; mutex_release_all &rArr; mutex_unlock &rArr; task_add
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__start_critical
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__end_critical
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_remove
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_add
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sleep
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_try_acquire
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_run
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_C
</UL>

<P><STRONG><a name="[bf]"></a>sem_create</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, semaphore.o(i.sem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = sem_create &rArr; malloc &rArr; mutex_lock &rArr; task_add
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_C
</UL>

<P><STRONG><a name="[c0]"></a>sem_delete</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, semaphore.o(i.sem_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = sem_delete &rArr; free &rArr; mutex_lock &rArr; task_add
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_C
</UL>

<P><STRONG><a name="[be]"></a>sem_init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, semaphore.o(i.sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = sem_init &rArr; exit
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_create
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_C
</UL>

<P><STRONG><a name="[a7]"></a>sem_release</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, semaphore.o(i.sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = sem_release &rArr; task_add
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__start_critical
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__end_critical
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_remove
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_add
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_run
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KrisOS_sem_release_from_ISR
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_C
</UL>

<P><STRONG><a name="[c1]"></a>sem_try_acquire</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, semaphore.o(i.sem_try_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = sem_try_acquire &rArr; exit
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__start_critical
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__end_critical
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_acquire
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_C
</UL>

<P><STRONG><a name="[81]"></a>stats</STRONG> (Thumb, 694 bytes, Stack size 40 bytes, os_tasks.o(i.stats))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = stats &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sleep
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scheduler.o(i.scheduler_init)
</UL>
<P><STRONG><a name="[dc]"></a>system_clock_config</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, time.o(i.system_clock_config))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
</UL>

<P><STRONG><a name="[e1]"></a>systick_config</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, time.o(i.systick_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = systick_config &rArr; nvic_set_priority
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_set_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start
</UL>

<P><STRONG><a name="[d4]"></a>task_add</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, scheduler.o(i.task_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = task_add
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__start_critical
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__end_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_release
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_acquire
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_wake_tasks
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>

<P><STRONG><a name="[82]"></a>task_complete_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scheduler.o(i.task_complete_handler))
<BR>[Address Reference Count : 1]<UL><LI> scheduler.o(i.task_init)
</UL>
<P><STRONG><a name="[b1]"></a>task_create_dynamic</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, scheduler.o(i.task_create_dynamic))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = task_create_dynamic &rArr; malloc &rArr; mutex_lock &rArr; task_add
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KrisOS_task_stack_usage
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_C
</UL>

<P><STRONG><a name="[b2]"></a>task_create_static</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, scheduler.o(i.task_create_static))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = task_create_static &rArr; task_init &rArr; task_add
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_C
</UL>

<P><STRONG><a name="[b5]"></a>task_delete</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, scheduler.o(i.task_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = task_delete &rArr; free &rArr; mutex_lock &rArr; task_add
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release_all
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__start_critical
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__end_critical
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_remove
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_run
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_C
</UL>

<P><STRONG><a name="[e3]"></a>task_init</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, scheduler.o(i.task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = task_init &rArr; task_add
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__start_critical
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__end_critical
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_add
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_run
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create_static
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create_dynamic
</UL>

<P><STRONG><a name="[d3]"></a>task_remove</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, scheduler.o(i.task_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = task_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__start_critical
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__end_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sleep
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delete
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_release
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_acquire
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_wake_tasks
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>

<P><STRONG><a name="[b3]"></a>task_sleep</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, scheduler.o(i.task_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = task_sleep &rArr; mutex_release_all &rArr; mutex_unlock &rArr; task_add
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release_all
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__start_critical
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__end_critical
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_remove
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_run
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_acquire
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_C
</UL>

<P><STRONG><a name="[7d]"></a>thermometer</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, thermometer.o(i.thermometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = thermometer &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nokia5110_set_cursor
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_addr
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo3.o(i.main)
</UL>
<P><STRONG><a name="[de]"></a>uart_init</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, uart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = uart_init &rArr; mutex_init &rArr; exit
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
</UL>

<P><STRONG><a name="[c6]"></a>uart_send_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(i.uart_send_char))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_ul2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats
</UL>

<P><STRONG><a name="[119]"></a>_ll_uto_f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[11a]"></a>__aeabi_l2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[11b]"></a>_ll_sto_f</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[8d]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[11c]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[11d]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = SVC_Handler &rArr; SVC_Handler_C &rArr; task_create_dynamic &rArr; malloc &rArr; mutex_lock &rArr; task_add
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_C
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
