


ARM Macro Assembler    Page 1 


    1 00000000         ; ******************************************************
                       ************************
    2 00000000         ; File:      special_reg_access.s
    3 00000000         ; Brief:     Routines for accessing special purpose regi
                       sters
    4 00000000         ; Author:   Krzysztof Koch
    5 00000000         ; Version:  V1.00
    6 00000000         ; Date created: 26/09/2016
    7 00000000         ; Last mod:  27/09/2016
    8 00000000         ;
    9 00000000         ; Note:   Methods allowing to access internal special re
                       gisters and other
   10 00000000         ;     functionality which can't easily be accessed using
                        C language syntax
   11 00000000         ; ******************************************************
                       ************************
   12 00000000         
   13 00000000         
   14 00000000                 PRESERVE8                    ; Preserve eight-by
                                                            te alignment of the
                                                             stack
   15 00000000                 THUMB                        ; Use Thumb instruc
                                                            tion set
   16 00000000                 AREA             |.text|, CODE, READONLY ; Instr
                                                            uctions to be place
                                                            d in ROM
   17 00000000         ;-------------------------------------------------------
                       ------------------------
   18 00000000         ; Function:     __disable_irqs
   19 00000000         ; Purpose:     Disable interrupts by setting the I bit i
                       n PRIMASK register
   20 00000000         ; Arguments: -
   21 00000000         ; Returns:   -
   22 00000000         ;-------------------------------------------------------
                       ------------------------
   23 00000000                 EXPORT           __disable_irqs
   24 00000000         __disable_irqs
                               PROC
   25 00000000 B672            CPSID            I
   26 00000002 4770            BX               LR
   27 00000004                 ENDP
   28 00000004         
   29 00000004         
   30 00000004         ;-------------------------------------------------------
                       ------------------------
   31 00000004         ; Function:     __enable_irqs
   32 00000004         ; Purpose:     Enable interrupts by clearing the I bit i
                       n PRIMASK register
   33 00000004         ; Arguments: -
   34 00000004         ; Returns:   -
   35 00000004         ;-------------------------------------------------------
                       ------------------------
   36 00000004                 EXPORT           __enable_irqs
   37 00000004         __enable_irqs
                               PROC
   38 00000004 B662            CPSIE            I
   39 00000006 4770            BX               LR
   40 00000008                 ENDP
   41 00000008         



ARM Macro Assembler    Page 2 


   42 00000008         
   43 00000008         ;-------------------------------------------------------
                       ------------------------
   44 00000008         ; Function:     __set_base_prio
   45 00000008         ; Purpose:     Set the base priority, disables interrupt
                       s with priority lower than
   46 00000008         ;    the argument. Writing 0 turns of priority masking
   47 00000008         ; Arguments:
   48 00000008         ;  R0 - base priority
   49 00000008         ; Returns:   -
   50 00000008         ;-------------------------------------------------------
                       ------------------------ 
   51 00000008                 EXPORT           __set_base_prio
   52 00000008         __set_base_prio
                               PROC
   53 00000008 F380 8811       MSR              BASEPRI, R0
   54 0000000C 4770            BX               LR
   55 0000000E                 ENDP
   56 0000000E         
   57 0000000E         
   58 0000000E         ;-------------------------------------------------------
                       ------------------------
   59 0000000E         ; Function:     __get_base_prio
   60 0000000E         ; Purpose:     Read the masking priority level
   61 0000000E         ; Arguments: -
   62 0000000E         ; Returns:   
   63 0000000E         ;  R0 - masking priority level
   64 0000000E         ;-------------------------------------------------------
                       ------------------------
   65 0000000E                 EXPORT           __get_base_prio
   66 0000000E         __get_base_prio
                               PROC
   67 0000000E F3EF 8011       MRS              R0, BASEPRI
   68 00000012 4770            BX               LR
   69 00000014                 ENDP
   70 00000014         
   71 00000014         ;-------------------------------------------------------
                       ------------------------
   72 00000014         ; Function:     __set_psp
   73 00000014         ; Purpose:     Set the value of the Process Stack Pointe
                       r
   74 00000014         ; Arguments:  
   75 00000014         ;  R0 - new base address of the process stack
   76 00000014         ; Returns:   - 
   77 00000014         ;-------------------------------------------------------
                       ------------------------
   78 00000014                 EXPORT           __set_psp
   79 00000014         __set_psp
                               PROC
   80 00000014 F380 8809       MSR              PSP, r0
   81 00000018 4770            BX               LR
   82 0000001A                 ENDP
   83 0000001A         
   84 0000001A         
   85 0000001A         ;-------------------------------------------------------
                       ------------------------
   86 0000001A         ; Function:     __get_psp
   87 0000001A         ; Purpose:     Get the value of the Process Stack Pointe
                       r



ARM Macro Assembler    Page 3 


   88 0000001A         ; Arguments:  -
   89 0000001A         ; Returns:   
   90 0000001A         ;  R0 - value of PSP
   91 0000001A         ;-------------------------------------------------------
                       ------------------------
   92 0000001A                 EXPORT           __get_psp
   93 0000001A         __get_psp
                               PROC
   94 0000001A F3EF 8009       MRS              R0, PSP
   95 0000001E 4770            BX               LR
   96 00000020                 ENDP
   97 00000020         
   98 00000020         
   99 00000020         ;-------------------------------------------------------
                       ------------------------
  100 00000020         ; Function:     __enable_fpu
  101 00000020         ; Purpose:     Enable the floating-point unit co-process
                       or
  102 00000020         ; Arguments:  -
  103 00000020         ; Returns:   - 
  104 00000020         ;-------------------------------------------------------
                       ------------------------
  105 00000020                 EXPORT           __enable_fpu
  106 00000020         __enable_fpu
                               PROC
  107 00000020 4812            LDR              R0, =0xE000ED88
  108 00000022 6801            LDR              R1, [R0]
  109 00000024 F441 0170       ORR              R1, R1, #(0xF << 20)
  110 00000028 6001            STR              R1, [R0]
  111 0000002A F3BF 8F4F       DSB                          ; wait for store to
                                                             complete
  112 0000002E F3BF 8F6F       ISB                          ; flush the pipelin
                                                            e 
  113 00000032 4770            BX               LR
  114 00000034                 ENDP
  115 00000034         
  116 00000034         
  117 00000034         ;-------------------------------------------------------
                       ------------------------
  118 00000034         ; Function:     __disable_fpu
  119 00000034         ; Purpose:     Enable the floating-point unit co-process
                       or
  120 00000034         ; Arguments:  -
  121 00000034         ; Returns:   - 
  122 00000034         ;-------------------------------------------------------
                       ------------------------
  123 00000034                 EXPORT           __disable_fpu
  124 00000034         __disable_fpu
                               PROC
  125 00000034 480D            LDR              R0, =0xE000ED88
  126 00000036 6801            LDR              R1, [R0]
  127 00000038 F421 0170       BIC              R1, R1, #(0xF << 20)
  128 0000003C 6001            STR              R1, [R0]
  129 0000003E F3BF 8F4F       DSB                          ; wait for store to
                                                             complete
  130 00000042 F3BF 8F6F       ISB                          ; flush the pipelin
                                                            e 
  131 00000046 4770            BX               LR
  132 00000048                 ENDP



ARM Macro Assembler    Page 4 


  133 00000048         
  134 00000048         
  135 00000048         ;-------------------------------------------------------
                       ------------------------
  136 00000048         ; Function:     __set_control
  137 00000048         ; Purpose:     Set the value of the CONTROL register
  138 00000048         ; Arguments:  
  139 00000048         ;  R0 - value to set
  140 00000048         ; Returns:   - 
  141 00000048         ;-------------------------------------------------------
                       ------------------------
  142 00000048                 EXPORT           __set_control
  143 00000048         __set_control
                               PROC
  144 00000048 F380 8814       MSR              CONTROL, r0
  145 0000004C F3BF 8F6F       ISB                          ; flush the pipelin
                                                            e
  146 00000050 4770            BX               LR
  147 00000052                 ENDP
  148 00000052         
  149 00000052         
  150 00000052         ;-------------------------------------------------------
                       ------------------------
  151 00000052         ; Function:     __get_control
  152 00000052         ; Purpose:     Get the value from the CONTROL register
  153 00000052         ; Arguments:  - 
  154 00000052         ; Returns:   
  155 00000052         ;  R0 - value from CONTROL register
  156 00000052         ;-------------------------------------------------------
                       ------------------------
  157 00000052                 EXPORT           __get_control
  158 00000052         __get_control
                               PROC
  159 00000052 F3EF 8014       MRS              R0, CONTROL
  160 00000056 4770            BX               LR
  161 00000058                 ENDP
  162 00000058         
  163 00000058         
  164 00000058         ;-------------------------------------------------------
                       ------------------------
  165 00000058         ; Function:     __start_critical
  166 00000058         ; Purpose:     Enter critical section by disabling inter
                       rupts and saving the 
  167 00000058         ;     prevous interrupt control value in PRIMASK registe
                       r
  168 00000058         ; Arguments:  - 
  169 00000058         ; Returns:   -
  170 00000058         ;-------------------------------------------------------
                       ------------------------
  171 00000058                 EXPORT           __start_critical
  173 00000058         __start_critical
                               PROC
  174 00000058 F3EF 8010       MRS              R0, PRIMASK
  175 0000005C B401            PUSH             {R0}
  176 0000005E B672            CPSID            I
  177 00000060 4770            BX               LR
  178 00000062                 ENDP
  179 00000062         
  180 00000062         



ARM Macro Assembler    Page 5 


  181 00000062         ;-------------------------------------------------------
                       ------------------------
  182 00000062         ; Function:     __end_critical
  183 00000062         ; Purpose:     End critical section by restoring the pre
                       vious value of PRIMASK
  184 00000062         ; Arguments:  - 
  185 00000062         ; Returns:   -
  186 00000062         ;-------------------------------------------------------
                       ------------------------
  187 00000062                 EXPORT           __end_critical
  188 00000062         __end_critical
                               PROC
  189 00000062 BC01            POP              {R0}
  190 00000064 F380 8810       MSR              PRIMASK, R0
  191 00000068 4770            BX               LR
  192 0000006A                 ENDP
  193 0000006A         
  194 0000006A         
  195 0000006A         
  196 0000006A 00 00           ALIGN
  197 0000006C                 END
              E000ED88 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\special_reg_access.d -o.\objects\special_reg_access.o
 -I"C:\Users\Krzysztof Koch\Documents\KrisRTOS\RTE" -IC:\Keil_v5\ARM\PACK\Keil\
TM4C_DFP\1.1.0\Device\Include\TM4C123 -IC:\Keil_v5\ARM\CMSIS\Include --predefin
e="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 520" --predefine="TM4C123
GH6PM SETA 1" --list=.\listings\special_reg_access.lst "src\HAL & Drivers\speci
al_reg_access.s"



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 16 in file src\HAL
   Uses
      None
Comment: .text unused
__disable_fpu 00000034

Symbol: __disable_fpu
   Definitions
      At line 124 in file src\HAL
   Uses
      At line 123 in file src\HAL
Comment: __disable_fpu used once
__disable_irqs 00000000

Symbol: __disable_irqs
   Definitions
      At line 24 in file src\HAL
   Uses
      At line 23 in file src\HAL
Comment: __disable_irqs used once
__enable_fpu 00000020

Symbol: __enable_fpu
   Definitions
      At line 106 in file src\HAL
   Uses
      At line 105 in file src\HAL
Comment: __enable_fpu used once
__enable_irqs 00000004

Symbol: __enable_irqs
   Definitions
      At line 37 in file src\HAL
   Uses
      At line 36 in file src\HAL
Comment: __enable_irqs used once
__end_critical 00000062

Symbol: __end_critical
   Definitions
      At line 188 in file src\HAL
   Uses
      At line 187 in file src\HAL
Comment: __end_critical used once
__get_base_prio 0000000E

Symbol: __get_base_prio
   Definitions
      At line 66 in file src\HAL
   Uses
      At line 65 in file src\HAL
Comment: __get_base_prio used once
__get_control 00000052

Symbol: __get_control



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 158 in file src\HAL
   Uses
      At line 157 in file src\HAL
Comment: __get_control used once
__get_psp 0000001A

Symbol: __get_psp
   Definitions
      At line 93 in file src\HAL
   Uses
      At line 92 in file src\HAL
Comment: __get_psp used once
__set_base_prio 00000008

Symbol: __set_base_prio
   Definitions
      At line 52 in file src\HAL
   Uses
      At line 51 in file src\HAL
Comment: __set_base_prio used once
__set_control 00000048

Symbol: __set_control
   Definitions
      At line 143 in file src\HAL
   Uses
      At line 142 in file src\HAL
Comment: __set_control used once
__set_psp 00000014

Symbol: __set_psp
   Definitions
      At line 79 in file src\HAL
   Uses
      At line 78 in file src\HAL
Comment: __set_psp used once
__start_critical 00000058

Symbol: __start_critical
   Definitions
      At line 173 in file src\HAL
   Uses
      At line 171 in file src\HAL
Comment: __start_critical used once
13 symbols
349 symbols in table
