


ARM Macro Assembler    Page 1 


    1 00000000         ; ******************************************************
                       ************************
    2 00000000         ; File:      special_reg_access.s
    3 00000000         ; Brief:     Routines for accessing special purpose regi
                       sters
    4 00000000         ; Author:   Krzysztof Koch
    5 00000000         ; Version:  V1.00
    6 00000000         ; Date created: 26/09/2016
    7 00000000         ; Last mod:  11/03/2017
    8 00000000         ;
    9 00000000         ; Note:   
   10 00000000         ; Methods allowing access to Cortex-M4 internal register
                       s and other
   11 00000000         ;  functionality which can't be accessed using C languag
                       e syntax.
   12 00000000         ; ******************************************************
                       ************************
   13 00000000         
   14 00000000         
   15 00000000                 PRESERVE8                    ; Preserve eight-by
                                                            te alignment of the
                                                             stack
   16 00000000                 THUMB                        ; Use Thumb instruc
                                                            tion set
   17 00000000                 AREA             |.text|, CODE, READONLY ; Instr
                                                            uctions to be place
                                                            d in ROM
   18 00000000         ;-------------------------------------------------------
                       ------------------------
   19 00000000         ; Function:     __disable_irqs
   20 00000000         ; Purpose:     Disable interrupts by setting the I bit i
                       n PRIMASK register
   21 00000000         ; Arguments: -
   22 00000000         ; Returns:   -
   23 00000000         ;-------------------------------------------------------
                       ------------------------
   24 00000000                 EXPORT           __disable_irqs
   25 00000000         __disable_irqs
                               PROC
   26 00000000 B672            CPSID            I
   27 00000002 4770            BX               LR
   28 00000004                 ENDP
   29 00000004         
   30 00000004         
   31 00000004         
   32 00000004         ;-------------------------------------------------------
                       ------------------------
   33 00000004         ; Function:     __enable_irqs
   34 00000004         ; Purpose:     Enable interrupts by clearing the I bit i
                       n PRIMASK register
   35 00000004         ; Arguments: -
   36 00000004         ; Returns:   -
   37 00000004         ;-------------------------------------------------------
                       ------------------------
   38 00000004                 EXPORT           __enable_irqs
   39 00000004         __enable_irqs
                               PROC
   40 00000004 B662            CPSIE            I
   41 00000006 4770            BX               LR



ARM Macro Assembler    Page 2 


   42 00000008                 ENDP
   43 00000008         
   44 00000008         
   45 00000008         
   46 00000008         ;-------------------------------------------------------
                       ------------------------
   47 00000008         ; Function:     __set_base_prio
   48 00000008         ; Purpose:     Set the base priority, disables interrupt
                       s with priority lower than
   49 00000008         ;    the argument. Writing 0 turns of priority masking
   50 00000008         ; Arguments:
   51 00000008         ;  R0 - base priority
   52 00000008         ; Returns:   -
   53 00000008         ;-------------------------------------------------------
                       ------------------------ 
   54 00000008                 EXPORT           __set_base_prio
   55 00000008         __set_base_prio
                               PROC
   56 00000008 F380 8811       MSR              BASEPRI, R0
   57 0000000C 4770            BX               LR
   58 0000000E                 ENDP
   59 0000000E         
   60 0000000E         
   61 0000000E         
   62 0000000E         ;-------------------------------------------------------
                       ------------------------
   63 0000000E         ; Function:     __get_base_prio
   64 0000000E         ; Purpose:     Read the masking priority level
   65 0000000E         ; Arguments: -
   66 0000000E         ; Returns:   
   67 0000000E         ;  R0 - masking priority level
   68 0000000E         ;-------------------------------------------------------
                       ------------------------
   69 0000000E                 EXPORT           __get_base_prio
   70 0000000E         __get_base_prio
                               PROC
   71 0000000E F3EF 8011       MRS              R0, BASEPRI
   72 00000012 4770            BX               LR
   73 00000014                 ENDP
   74 00000014         
   75 00000014         
   76 00000014         
   77 00000014         ;-------------------------------------------------------
                       ------------------------
   78 00000014         ; Function:     __set_psp
   79 00000014         ; Purpose:     Set the value of the Process Stack Pointe
                       r
   80 00000014         ; Arguments:  
   81 00000014         ;  R0 - new base address of the process stack
   82 00000014         ; Returns:   - 
   83 00000014         ;-------------------------------------------------------
                       ------------------------
   84 00000014                 EXPORT           __set_psp
   85 00000014         __set_psp
                               PROC
   86 00000014 F380 8809       MSR              PSP, r0
   87 00000018 4770            BX               LR
   88 0000001A                 ENDP
   89 0000001A         



ARM Macro Assembler    Page 3 


   90 0000001A         
   91 0000001A         
   92 0000001A         ;-------------------------------------------------------
                       ------------------------
   93 0000001A         ; Function:     __get_psp
   94 0000001A         ; Purpose:     Get the value of the Process Stack Pointe
                       r
   95 0000001A         ; Arguments:  -
   96 0000001A         ; Returns:   
   97 0000001A         ;  R0 - value of PSP
   98 0000001A         ;-------------------------------------------------------
                       ------------------------
   99 0000001A                 EXPORT           __get_psp
  100 0000001A         __get_psp
                               PROC
  101 0000001A F3EF 8009       MRS              R0, PSP
  102 0000001E 4770            BX               LR
  103 00000020                 ENDP
  104 00000020         
  105 00000020         
  106 00000020         
  107 00000020         ;-------------------------------------------------------
                       ------------------------
  108 00000020         ; Function:     __enable_fpu
  109 00000020         ; Purpose:     Enable the floating-point unit co-process
                       or
  110 00000020         ; Arguments:  -
  111 00000020         ; Returns:   - 
  112 00000020         ;-------------------------------------------------------
                       ------------------------
  113 00000020                 EXPORT           __enable_fpu
  114 00000020         __enable_fpu
                               PROC
  115 00000020 4813            LDR              R0, =0xE000ED88
  116 00000022 6801            LDR              R1, [R0]
  117 00000024 F441 0170       ORR              R1, R1, #(0xF << 20)
  118 00000028 6001            STR              R1, [R0]
  119 0000002A F3BF 8F4F       DSB                          ; wait for store to
                                                             complete
  120 0000002E F3BF 8F6F       ISB                          ; flush the pipelin
                                                            e 
  121 00000032 4770            BX               LR
  122 00000034                 ENDP
  123 00000034         
  124 00000034         
  125 00000034         
  126 00000034         ;-------------------------------------------------------
                       ------------------------
  127 00000034         ; Function:     __disable_fpu
  128 00000034         ; Purpose:     Disable the floating-point unit co-proces
                       sor
  129 00000034         ; Arguments:  -
  130 00000034         ; Returns:   - 
  131 00000034         ;-------------------------------------------------------
                       ------------------------
  132 00000034                 EXPORT           __disable_fpu
  133 00000034         __disable_fpu
                               PROC
  134 00000034 480E            LDR              R0, =0xE000ED88



ARM Macro Assembler    Page 4 


  135 00000036 6801            LDR              R1, [R0]
  136 00000038 F421 0170       BIC              R1, R1, #(0xF << 20)
  137 0000003C 6001            STR              R1, [R0]
  138 0000003E F3BF 8F4F       DSB                          ; wait for store to
                                                             complete
  139 00000042 F3BF 8F6F       ISB                          ; flush the process
                                                            or pipeline 
  140 00000046 4770            BX               LR
  141 00000048                 ENDP
  142 00000048         
  143 00000048         
  144 00000048         
  145 00000048         ;-------------------------------------------------------
                       ------------------------
  146 00000048         ; Function:     __set_control
  147 00000048         ; Purpose:     Set the value of the CONTROL register
  148 00000048         ; Arguments:  
  149 00000048         ;  R0 - value to set
  150 00000048         ; Returns:   - 
  151 00000048         ;-------------------------------------------------------
                       ------------------------
  152 00000048                 EXPORT           __set_control
  153 00000048         __set_control
                               PROC
  154 00000048 F380 8814       MSR              CONTROL, r0
  155 0000004C F3BF 8F6F       ISB                          ; flush the process
                                                            or pipeline
  156 00000050 4770            BX               LR
  157 00000052                 ENDP
  158 00000052         
  159 00000052         
  160 00000052         
  161 00000052         ;-------------------------------------------------------
                       ------------------------
  162 00000052         ; Function:     __get_control
  163 00000052         ; Purpose:     Get the value from the CONTROL register
  164 00000052         ; Arguments:  - 
  165 00000052         ; Returns:   
  166 00000052         ;  R0 - value from CONTROL register
  167 00000052         ;-------------------------------------------------------
                       ------------------------
  168 00000052                 EXPORT           __get_control
  169 00000052         __get_control
                               PROC
  170 00000052 F3EF 8014       MRS              R0, CONTROL
  171 00000056 4770            BX               LR
  172 00000058                 ENDP
  173 00000058         
  174 00000058         
  175 00000058         
  176 00000058         ;-------------------------------------------------------
                       ------------------------
  177 00000058         ; Function:     __get_ipsr
  178 00000058         ; Purpose:     Get the value from the IPSR register
  179 00000058         ; Arguments:  - 
  180 00000058         ; Returns:   
  181 00000058         ;  R0 - value from IPSR register
  182 00000058         ;-------------------------------------------------------
                       ------------------------



ARM Macro Assembler    Page 5 


  183 00000058                 EXPORT           __get_ipsr
  184 00000058         __get_ipsr
                               PROC
  185 00000058 F3EF 8005       MRS              R0, IPSR
  186 0000005C 4770            BX               LR
  187 0000005E                 ENDP
  188 0000005E         
  189 0000005E         
  190 0000005E         
  191 0000005E         ;-------------------------------------------------------
                       ------------------------
  192 0000005E         ; Function:     __start_critical
  193 0000005E         ; Purpose:     Enter critical section by disabling inter
                       rupts and saving the 
  194 0000005E         ;     prevous interrupt control value in PRIMASK registe
                       r
  195 0000005E         ; Arguments:  - 
  196 0000005E         ; Returns:   -
  197 0000005E         ;-------------------------------------------------------
                       ------------------------
  198 0000005E                 EXPORT           __start_critical
  200 0000005E         __start_critical
                               PROC
  201 0000005E F3EF 8010       MRS              R0, PRIMASK
  202 00000062 B401            PUSH             {R0}
  203 00000064 B672            CPSID            I
  204 00000066 4770            BX               LR
  205 00000068                 ENDP
  206 00000068         
  207 00000068         
  208 00000068         ;-------------------------------------------------------
                       ------------------------
  209 00000068         ; Function:     __end_critical
  210 00000068         ; Purpose:     End critical section by restoring the pre
                       vious value of PRIMASK
  211 00000068         ; Arguments:  - 
  212 00000068         ; Returns:   -
  213 00000068         ;-------------------------------------------------------
                       ------------------------
  214 00000068                 EXPORT           __end_critical
  215 00000068         __end_critical
                               PROC
  216 00000068 BC01            POP              {R0}
  217 0000006A F380 8810       MSR              PRIMASK, R0
  218 0000006E 4770            BX               LR
  219 00000070                 ENDP
  220 00000070         
  221 00000070         
  222 00000070         
  223 00000070                 ALIGN
  224 00000070                 END
              E000ED88 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\special_reg_access.d -o.\objects\special_reg_access.o
 -I"C:\Users\Krzysztof Koch\Documents\KrisRTOS\RTE" -IC:\Keil_v5\ARM\PACK\Keil\
TM4C_DFP\1.1.0\Device\Include\TM4C123 -IC:\Keil_v5\ARM\CMSIS\Include --predefin
e="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 520" --predefine="TM4C123
GH6PM SETA 1" --list=.\listings\special_reg_access.lst "src\HAL & Drivers\speci
al_reg_access.s"



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 17 in file src\HAL
   Uses
      None
Comment: .text unused
__disable_fpu 00000034

Symbol: __disable_fpu
   Definitions
      At line 133 in file src\HAL
   Uses
      At line 132 in file src\HAL
Comment: __disable_fpu used once
__disable_irqs 00000000

Symbol: __disable_irqs
   Definitions
      At line 25 in file src\HAL
   Uses
      At line 24 in file src\HAL
Comment: __disable_irqs used once
__enable_fpu 00000020

Symbol: __enable_fpu
   Definitions
      At line 114 in file src\HAL
   Uses
      At line 113 in file src\HAL
Comment: __enable_fpu used once
__enable_irqs 00000004

Symbol: __enable_irqs
   Definitions
      At line 39 in file src\HAL
   Uses
      At line 38 in file src\HAL
Comment: __enable_irqs used once
__end_critical 00000068

Symbol: __end_critical
   Definitions
      At line 215 in file src\HAL
   Uses
      At line 214 in file src\HAL
Comment: __end_critical used once
__get_base_prio 0000000E

Symbol: __get_base_prio
   Definitions
      At line 70 in file src\HAL
   Uses
      At line 69 in file src\HAL
Comment: __get_base_prio used once
__get_control 00000052

Symbol: __get_control



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 169 in file src\HAL
   Uses
      At line 168 in file src\HAL
Comment: __get_control used once
__get_ipsr 00000058

Symbol: __get_ipsr
   Definitions
      At line 184 in file src\HAL
   Uses
      At line 183 in file src\HAL
Comment: __get_ipsr used once
__get_psp 0000001A

Symbol: __get_psp
   Definitions
      At line 100 in file src\HAL
   Uses
      At line 99 in file src\HAL
Comment: __get_psp used once
__set_base_prio 00000008

Symbol: __set_base_prio
   Definitions
      At line 55 in file src\HAL
   Uses
      At line 54 in file src\HAL
Comment: __set_base_prio used once
__set_control 00000048

Symbol: __set_control
   Definitions
      At line 153 in file src\HAL
   Uses
      At line 152 in file src\HAL
Comment: __set_control used once
__set_psp 00000014

Symbol: __set_psp
   Definitions
      At line 85 in file src\HAL
   Uses
      At line 84 in file src\HAL
Comment: __set_psp used once
__start_critical 0000005E

Symbol: __start_critical
   Definitions
      At line 200 in file src\HAL
   Uses
      At line 198 in file src\HAL
Comment: __start_critical used once
14 symbols
350 symbols in table
